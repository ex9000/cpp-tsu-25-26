name: Task 01 CI

on:
  push:
    branches: [ "task-01" ]
  pull_request:
    branches: [ "task-01" ]
  workflow_dispatch:
    inputs:
      checker_name:
        description: 'Checker name'
        required: false
        default: 'cmp-file'
        type: string
      tests_timeout:
        description: 'Tests timeout in seconds'
        required: false
        default: '3'
        type: string

env:
  BRANCH_NAME: 'task-01'
  CHECKER_NAME: ${{ inputs.checker_name || 'cmp-file' }}
  TESTS_TIMEOUT: ${{ inputs.tests_timeout || '3' }}

jobs:
  build-checker:
    name: Build Checker
    runs-on: ubuntu-latest
    steps:
      - name: Check out base repo main for checker
        uses: actions/checkout@v4
        with:
          # Ensure we fetch the base repository (not the fork) and its main branch
          repository: ${{ github.event.pull_request.base.repo.full_name || github.repository }}
          ref: main
          path: base_main
          fetch-depth: 1

      - name: Build checker from base main
        run: |
          mkdir -p base_main/build
          g++ -std=c++17 -O2 -pipe -I base_main \
             base_main/checkers/${{ env.CHECKER_NAME }}/main.cpp \
             -o base_main/build/${{ env.CHECKER_NAME }}

      - name: Set artifact names
        run: |
          # Get target branch and author, replace slashes with dashes
          TARGET_BRANCH="${{ github.event.pull_request.base.ref || github.ref_name }}"
          AUTHOR="${{ github.event.pull_request.user.login || github.actor }}"
          TARGET_BRANCH_SAFE="${TARGET_BRANCH//\//-}"
          AUTHOR_SAFE="${AUTHOR//\//-}"
          echo "TARGET_BRANCH_SAFE=$TARGET_BRANCH_SAFE" >> "$GITHUB_ENV"
          echo "AUTHOR_SAFE=$AUTHOR_SAFE" >> "$GITHUB_ENV"
          echo "CHECKER_ARTIFACT_NAME=${{ env.CHECKER_NAME }}-$AUTHOR_SAFE-$TARGET_BRANCH_SAFE" >> "$GITHUB_ENV"

      - name: Upload checker artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CHECKER_ARTIFACT_NAME }}
          path: base_main/build/${{ env.CHECKER_NAME }}
          if-no-files-found: error
          retention-days: 7

  build-solution:
    name: Build Solution
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository (PR head)
        uses: actions/checkout@v4

      - name: Show compiler version
        run: g++ --version

      - name: Build solution
        run: |
          mkdir -p build
          g++ -std=c++17 -O2 -pipe solution.cpp -o build/solution

      - name: Set artifact names
        run: |
          # Get target branch and author, replace slashes with dashes
          TARGET_BRANCH="${{ github.event.pull_request.base.ref || github.ref_name }}"
          AUTHOR="${{ github.event.pull_request.user.login || github.actor }}"
          TARGET_BRANCH_SAFE="${TARGET_BRANCH//\//-}"
          AUTHOR_SAFE="${AUTHOR//\//-}"
          echo "TARGET_BRANCH_SAFE=$TARGET_BRANCH_SAFE" >> "$GITHUB_ENV"
          echo "AUTHOR_SAFE=$AUTHOR_SAFE" >> "$GITHUB_ENV"
          echo "SOLUTION_ARTIFACT_NAME=$TARGET_BRANCH_SAFE-$AUTHOR_SAFE-solution" >> "$GITHUB_ENV"

      - name: Upload solution artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOLUTION_ARTIFACT_NAME }}
          path: build/solution
          if-no-files-found: error
          retention-days: 7

  run-examples:
    name: Check Example Tests
    needs: [ build-checker, build-solution ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out target branch tests
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref || github.ref_name }}
          fetch-depth: 1

      - name: Set artifact names
        run: |
          # Get target branch and author, replace slashes with dashes
          TARGET_BRANCH="${{ github.event.pull_request.base.ref || github.ref_name }}"
          AUTHOR="${{ github.event.pull_request.user.login || github.actor }}"
          TARGET_BRANCH_SAFE="${TARGET_BRANCH//\//-}"
          AUTHOR_SAFE="${AUTHOR//\//-}"
          echo "TARGET_BRANCH_SAFE=$TARGET_BRANCH_SAFE" >> "$GITHUB_ENV"
          echo "AUTHOR_SAFE=$AUTHOR_SAFE" >> "$GITHUB_ENV"
          echo "CHECKER_ARTIFACT_NAME=${{ env.CHECKER_NAME }}-$AUTHOR_SAFE-$TARGET_BRANCH_SAFE" >> "$GITHUB_ENV"
          echo "SOLUTION_ARTIFACT_NAME=$TARGET_BRANCH_SAFE-$AUTHOR_SAFE-solution" >> "$GITHUB_ENV"

      - name: Download checker artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CHECKER_ARTIFACT_NAME }}
          path: artifact

      - name: Download solution artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.SOLUTION_ARTIFACT_NAME }}
          path: artifact

      - name: Make binaries executable
        run: |
          chmod +x artifact/solution
          chmod +x artifact/${{ env.CHECKER_NAME }}

      - name: Run solution against tests and compare (Python runner)
        run: |
          set -eu
          python3 --version
          python3 run/test_runner.py \
            --timeout ${{ env.TESTS_TIMEOUT }} \
            --solution artifact/solution \
            --checker artifact/${{ env.CHECKER_NAME }} \
            --tests tests \
            --out work/out

  run-tests:
    name: Final Tests
    needs: [ build-checker, build-solution, run-examples ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out target branch tests
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref || github.ref_name }}
          fetch-depth: 1

      - name: Set artifact names
        run: |
          # Get target branch and author, replace slashes with dashes
          TARGET_BRANCH="${{ github.event.pull_request.base.ref || github.ref_name }}"
          AUTHOR="${{ github.event.pull_request.user.login || github.actor }}"
          TARGET_BRANCH_SAFE="${TARGET_BRANCH//\//-}"
          AUTHOR_SAFE="${AUTHOR//\//-}"
          echo "TARGET_BRANCH_SAFE=$TARGET_BRANCH_SAFE" >> "$GITHUB_ENV"
          echo "AUTHOR_SAFE=$AUTHOR_SAFE" >> "$GITHUB_ENV"
          echo "CHECKER_ARTIFACT_NAME=${{ env.CHECKER_NAME }}-$AUTHOR_SAFE-$TARGET_BRANCH_SAFE" >> "$GITHUB_ENV"
          echo "SOLUTION_ARTIFACT_NAME=$TARGET_BRANCH_SAFE-$AUTHOR_SAFE-solution" >> "$GITHUB_ENV"

      - name: Download checker artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CHECKER_ARTIFACT_NAME }}
          path: artifact

      - name: Download solution artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.SOLUTION_ARTIFACT_NAME }}
          path: artifact

      - name: Make binaries executable
        run: |
          chmod +x artifact/solution
          chmod +x artifact/${{ env.CHECKER_NAME }}

      - name: Extract secret tests
        env:
          SECRETS_JSON: ${{ toJSON(secrets) }}
        run: |
          mkdir -p secret-tests
          # Use dynamic secret name based on branch name
          SECRET_NAME="$(echo '${{ env.BRANCH_NAME }}' | tr '[:lower:]' '[:upper:]' | tr '-' '_')_TESTS"
          echo "Using secret: $SECRET_NAME"
          SECRET_VALUE=$(echo "$SECRETS_JSON" | jq -r ".[\"$SECRET_NAME\"]")
          if [ "$SECRET_VALUE" = "null" ] || [ -z "$SECRET_VALUE" ]; then
            echo "Warning: Secret $SECRET_NAME not found, skipping secret tests"
            exit 1
          fi
          echo "$SECRET_VALUE" | base64 -d | tar -xzm --overwrite -C secret-tests

      - name: Run solution against secret tests and compare (Python runner)
        run: |
          set -eu
          python3 --version
          python3 run/test_runner.py \
            --silent \
            --timeout ${{ env.TESTS_TIMEOUT }} \
            --solution artifact/solution \
            --checker artifact/${{ env.CHECKER_NAME }} \
            --tests secret-tests \
            --out work/out
